---
import { DashboardData } from "../data";
import { processPlugins } from "../utils";

const plugins = await processPlugins();

// Collect all languages with 'done' translation anywhere
const languagesWithTranslations = new Set<string>();
for (const plugin of plugins) {
  for (const keyData of plugin.keys) {
    for (const [lang, status] of Object.entries(keyData.locales)) {
      if (status === "done") {
        languagesWithTranslations.add(lang);
      }
    }
  }
}

// Now filter the locales array accordingly
const filteredLocales = DashboardData.locales.filter((locale) =>
  languagesWithTranslations.has(locale.lang)
);

// Keep pluginLinks unchanged (or filter similarly if needed)
const pluginLinks = DashboardData.plugins.map((plugin) => ({
  name: plugin.name,
  link: `/plugins/${plugin.packageName}`,
}));

const localeLinks = filteredLocales.map((locale) => ({
  label: locale.label,
  link: `/languages/${locale.lang}`,
}));
---

<nav class="top-dropdown-menu" role="navigation" aria-label="Main menu">
  <ul class="menu-list">
    <li class="menu-button" style="text-decoration: none;">
      <a href="/" style="color: inherit;">Home</a>
    </li>
    <li class="menu-item" data-menu="plugin">
      <button
        class="menu-button"
        aria-haspopup="true"
        aria-expanded="false"
        type="button"
      >
        View by plugin ▾
      </button>
      <ul class="submenu" hidden>
        {
          pluginLinks.map((plugin) => (
            <li>
              <a href={plugin.link}>{plugin.name}</a>
            </li>
          ))
        }
      </ul>
    </li>
    <li class="menu-item" data-menu="language">
      <button
        class="menu-button"
        aria-haspopup="true"
        aria-expanded="false"
        type="button"
      >
        View by language ▾
      </button>
      <ul class="submenu" hidden>
        {
          localeLinks.map((locale) => (
            <li>
              <a href={locale.link}>{locale.label}</a>
            </li>
          ))
        }
      </ul>
    </li>
  </ul>
</nav>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const menuItems = document.querySelectorAll(".menu-item");

    menuItems.forEach((item) => {
      const button = item.querySelector(".menu-button");
      const submenu = item.querySelector(".submenu");

      button.addEventListener("click", () => {
        const expanded = button.getAttribute("aria-expanded") === "true";
        // Close all other menus
        menuItems.forEach((other) => {
          if (other !== item) {
            other.querySelector(".submenu").hidden = true;
            other
              .querySelector(".menu-button")
              .setAttribute("aria-expanded", "false");
          }
        });

        if (expanded) {
          submenu.hidden = true;
          button.setAttribute("aria-expanded", "false");
        } else {
          submenu.hidden = false;
          button.setAttribute("aria-expanded", "true");
        }
      });
    });

    // Optional: close menu on outside click
    document.addEventListener("click", (e) => {
      if (!e.target.closest(".top-dropdown-menu")) {
        menuItems.forEach((item) => {
          item.querySelector(".submenu").hidden = true;
          item
            .querySelector(".menu-button")
            .setAttribute("aria-expanded", "false");
        });
      }
    });
  });
</script>

<style>
  /* Container */
  .top-dropdown-menu {
    background-color: var(--ln-color-gray-1);
    font-family: var(--ln-font-body);
    padding: 0.5rem 1rem;
    border-bottom: 1px solid var(--ln-color-gray-3);
    display: flex;
    justify-content: center;
  }

  /* Top-level menu */
  .menu-list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: 2rem;
  }

  .menu-item {
    position: relative;
  }

  .menu-button {
    all: unset;
    cursor: pointer;
    font-weight: 600;
    color: var(--ln-color-black);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    transition: background-color 0.2s ease;
    user-select: none;
  }

  .menu-button:hover,
  .menu-button:focus {
    background-color: var(--ln-color-blue);
    color: var(--ln-color-white);
    outline-offset: 2px;
    outline: 2px solid var(--ln-color-blue);
  }

  .submenu {
    /* Keep all styles */
    opacity: 1 !important;
    pointer-events: auto !important;
    transform: translateY(0) !important;

    position: absolute;
    top: 110%;
    left: 0;
    background-color: var(--ln-color-gray-1);
    padding: 0.5rem 0;
    margin: 0;
    min-width: 180px;
    box-shadow: 0 6px 12px var(--ln-color-gray-3);
    border-radius: 0.25rem;
    z-index: 100;
  }

  /* Hide when hidden attribute is present */
  .submenu[hidden] {
    display: none !important;
  }

  /* Show submenu on hover */
  .menu-item:hover > .submenu,
  .menu-item:focus-within > .submenu {
    opacity: 1;
    pointer-events: auto;
    transform: translateY(0);
  }

  /* Submenu links */
  .submenu li {
    padding: 0;
  }

  .submenu a {
    display: block;
    padding: 0.4rem 1rem;
    color: var(--ln-color-black);
    text-decoration: none;
    font-weight: 500;
    transition: background-color 0.15s ease;
  }

  .submenu a:hover,
  .submenu a:focus {
    background-color: var(--ln-color-blue);
    color: var(--ln-color-white);
    outline: none;
  }
</style>
